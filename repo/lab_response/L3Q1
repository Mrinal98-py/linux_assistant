L3Q1 - Write a connection-oriented client and server program in C using command line arguments. At the server side, pass the port number (to whom the server will bind to) in the command line. At the client side, pass the IP address and the port number of the server (to whom the client will connect to) as command line argument and carry out the following tasks.
◦ After establishment of connection print the IP Address and port number of the client to whom the server is connected now.
◦ Then exchange messages.
◦ After message exchange is over then the client sends a “close” message to the server to tear down the connection.

Explanation -  In this task, we need to create two C programs, one for the server and the other for the client, that communicate over a connection-oriented socket. The server will bind to a specified port number, and the client will connect to the server by providing the server's IP address and port number as command line arguments. The following steps outline what needs to be done:

Create Server Program:
    • The server program will bind to a specified port number and listen for incoming connections.
    • Once a client connects, it will print the IP address and port number of the connected client.
    • The server will then exchange messages with the client.
    • If the client sends a "close" message, the server will tear down the connection and exit.
Create Client Program:
    • The client program will connect to the server by providing the server's IP address and port number as command line arguments.
    • After establishing a connection, it will exchange messages with the server.
    • When the message exchange is over, the client will send a "close" message to the server to request the connection be closed.

Code -  
Here's the server program:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <port>\n", argv[0]);
        exit(1);
    }

    int server_sock, client_sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);

    server_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (server_sock < 0) {
        perror("Socket creation error");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(atoi(argv[1]));
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(server_sock, (struct sockaddr *)&server_addr, sizeof(server_addr) < 0) {
        perror("Binding error");
        exit(1);
    }

    listen(server_sock, 5);

    printf("Server listening on port %s\n", argv[1]);

    client_sock = accept(server_sock, (struct sockaddr *)&client_addr, &client_len);
    printf("Connected to client: %s:%d\n", inet_ntoa(client_addr.sin_addr), ntohs(client_addr.sin_port));

    char message[1024];
    while (1) {
        recv(client_sock, message, sizeof(message), 0);
        printf("Received: %s", message);

        if (strcmp(message, "close\n") == 0) {
            printf("Closing connection.\n");
            break;
        }
    }

    close(client_sock);
    close(server_sock);
    return 0;
}

Here's the client program:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: %s <server-ip> <server-port>\n", argv[0]);
        exit(1);
    }

    int client_sock;
    struct sockaddr_in server_addr;

    client_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (client_sock < 0) {
        perror("Socket creation error");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(atoi(argv[2));
    server_addr.sin_addr.s_addr = inet_addr(argv[1]);

    if (connect(client_sock, (struct sockaddr *)&server_addr, sizeof(server_addr)) < 0) {
        perror("Connection error");
        exit(1);
    }

    printf("Connected to server: %s:%s\n", argv[1], argv[2]);

    char message[1024];
    while (1) {
        printf("Enter a message: ");
        fgets(message, sizeof(message), stdin);
        send(client_sock, message, strlen(message), 0);

        if (strcmp(message, "close\n") == 0) {
            printf("Requesting server to close the connection.\n");
            break;
        }
    }

    close(client_sock);
    return 0;
}

References -  https://www.geeksforgeeks.org/tcp-server-client-implementation-in-c/
https://www.programminglogic.com/example-of-client-server-program-in-c-using-sockets-and-tcp/
