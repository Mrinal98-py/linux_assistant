L2Q1 - Write a sender and receiver program in C by passing the IP address and the port number of each other through the command line arguments using connection less socket. Both of them will exchange messages with each other continuously. If any one of them will receive the “exit” message from the other end then both of them will close the connection. (Assume both the client and server are running with in the same host)

Explanation - In this task, we need to create two C programs, one for the sender (client) and the other for the receiver (server). These programs will use connectionless sockets to exchange messages between them continuously. If either the sender or receiver receives the "exit" message from the other end, both of them will close the connection.

Here are the steps to implement this:

Create Sender (Client) Program:
    • The sender program will send messages to the receiver.
    • It will take the receiver's IP address and port number as command line arguments.
    • It will continuously send messages to the receiver until the "exit" message is sent.
Create Receiver (Server) Program:
    • The receiver program will listen for incoming messages from the sender.
    • It will take the port number as a command line argument.
    • It will continuously receive and process messages.
    • If it receives the "exit" message, it will respond and close the connection.

Code  -  
 
Here's the sender (client) program:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: %s <server-ip> <server-port>\n", argv[0]);
        exit(1);
    }

    int sockfd;
    struct sockaddr_in server_addr;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation error");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(atoi(argv[2));
    server_addr.sin_addr.s_addr = inet_addr(argv[1]);

    char message[1024];
    while (1) {
        printf("Enter a message: ");
        fgets(message, sizeof(message), stdin);

        sendto(sockfd, message, strlen(message), 0, (struct sockaddr*)&server_addr, sizeof(server_addr));

        if (strcmp(message, "exit\n") == 0) {
            printf("Exiting...\n");
            break;
        }
    }

    close(sockfd);
    return 0;
}

And here's the receiver (server) program:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>

int main(int argc, char *argv[]) {
    if (argc != 2) {
        printf("Usage: %s <port>\n", argv[0]);
        exit(1);
    }

    int sockfd;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        perror("Socket creation error");
        exit(1);
    }

    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(atoi(argv[1));
    server_addr.sin_addr.s_addr = INADDR_ANY;

    if (bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        perror("Binding error");
        exit(1);
    }

    char message[1024];
    while (1) {
        recvfrom(sockfd, message, sizeof(message), 0, (struct sockaddr*)&client_addr, &client_len);
        printf("Received: %s", message);

        if (strcmp(message, "exit\n") == 0) {
            printf("Exiting...\n");
            sendto(sockfd, "exit", 4, 0, (struct sockaddr*)&client_addr, client_len);
            break;
        }
    }

    close(sockfd);
    return 0;
}

References -  Beej's Guide to Network Programming-http://beej.us/guide/bgnet/
                        Linux man pages for socket, bind, sendto, recvfrom, etc.
